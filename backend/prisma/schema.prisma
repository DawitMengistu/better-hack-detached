generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  sentMessages  Message[]
  account       account[]
  session       session[]
  wakatime      wakatime?
  chats         Chat[]    @relation("UserToChat")
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model wakatime {
  id           String   @id
  userId       String   @unique
  accessToken  String
  refreshToken String?
  tokenType    String?
  expiresIn    Int?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    user     @relation(fields: [senderId], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  users     user[]    @relation("UserToChat")
}

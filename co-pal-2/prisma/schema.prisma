generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id
  name               String
  email              String       @unique
  emailVerified      Boolean      @default(false)
  image              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  onBoardingComplete Boolean      @default(false)
  connectBalance     Int          @default(0)
  preferencesSet     Boolean      @default(false)
  Message            Message[]
  accounts           account[]
  github             GitHub?
  linkedin           LinkedIn?
  matchesAsUser1     Match[]      @relation("User1Matches")
  matchesAsUser2     Match[]      @relation("User2Matches")
  preferences        Preferences?
  profile            Profile?
  sessions           session[]
  likedByUsers       UserLike[]   @relation("LikedByUsers")
  likedUsers         UserLike[]   @relation("UserLikes")
  passedByUsers      UserPass[]   @relation("PassedByUsers")
  passedUsers        UserPass[]   @relation("UserPasses")
  wakatime           WakaTime?
  Chat               Chat[]       @relation("UserToChat")

  @@map("user")
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model WakaTime {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String?
  tokenType    String?
  expiresIn    Int?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wakatime")
}

model GitHub {
  id                   String @id @default(cuid())
  userId               String @unique
  totalContributions   Int?
  activeWeeks          Int?
  totalWeeks           Int?
  longestStreak        Int?
  averageWeeklyCommits Int?
  topLanguage          String
  totalStars           Int?
  totalFollowers       Int?
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("github")
}

model LinkedIn {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String?
  tokenType    String?
  expiresIn    Int?
  scope        String?
  linkedinId   String?
  profileData  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("linkedin")
}

model Chat {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
  user      User[]    @relation("UserToChat")
}

model Message {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  chatId    String
  senderId  String
  Chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [senderId], references: [id])
}

model Preferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  preferredGenders   String[]
  ageRange           Int[]
  timeCommitment     Int[]
  techStack          String[]
  countryPreferences String[]
  occupations        String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model UserLike {
  id        String   @id @default(cuid())
  userId    String
  likedId   String
  createdAt DateTime @default(now())
  likedUser User     @relation("LikedByUsers", fields: [likedId], references: [id], onDelete: Cascade)
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, likedId])
  @@map("user_likes")
}

model UserPass {
  id         String   @id @default(cuid())
  userId     String
  passedId   String
  createdAt  DateTime @default(now())
  passedUser User     @relation("PassedByUsers", fields: [passedId], references: [id], onDelete: Cascade)
  user       User     @relation("UserPasses", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, passedId])
  @@map("user_passes")
}

model Match {
  id        String   @id @default(cuid())
  userId1   String
  userId2   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user1     User     @relation("User1Matches", fields: [userId1], references: [id], onDelete: Cascade)
  user2     User     @relation("User2Matches", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
  @@map("matches")
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Profile {
  id              String   @id @default(cuid())
  age             Int?
  gender          String?
  timeCommitment  Int[]
  techStack       String[]
  country         String?
  occupation      String?
  openForProjects Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}
